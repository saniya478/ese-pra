Dependancy

<dependencies>
    <dependency>
        <groupId>org.apache.poi</groupId>
        <artifactId>poi</artifactId>
        <version>5.2.3</version>
    </dependency>
    <dependency>
        <groupId>org.apache.poi</groupId>
        <artifactId>poi-ooxml</artifactId>
        <version>5.2.3</version>
    </dependency>
</dependencies>
-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------

JAVA CODE 

import org.apache.poi.ss.usermodel.*;
import org.apache.poi.xssf.usermodel.XSSFWorkbook;

import java.io.FileOutputStream;
import java.io.IOException;

public class StudentExcelUpdater {

    public static void main(String[] args) {
        String[] columns = {"ID", "Name", "Grade"};

        // Sample 10 student records
        String[][] students = {
                {"1", "Alice", "A"},
                {"2", "Bob", "B"},
                {"3", "Charlie", "A"},
                {"4", "David", "C"},
                {"5", "Eva", "B"},
                {"6", "Frank", "A"},
                {"7", "Grace", "B"},
                {"8", "Henry", "C"},
                {"9", "Ivy", "A"},
                {"10", "Jack", "B"}
        };

        Workbook workbook = new XSSFWorkbook();
        Sheet sheet = workbook.createSheet("Student Records");

        // Create header row
        Row headerRow = sheet.createRow(0);
        for (int i = 0; i < columns.length; i++) {
            Cell cell = headerRow.createCell(i);
            cell.setCellValue(columns[i]);
        }

        // Write student data
        for (int i = 0; i < students.length; i++) {
            Row row = sheet.createRow(i + 1); // Start from second row
            for (int j = 0; j < students[i].length; j++) {
                row.createCell(j).setCellValue(students[i][j]);
            }
        }

        // Resize columns to fit content
        for (int i = 0; i < columns.length; i++) {
            sheet.autoSizeColumn(i);
        }

        // Write the output to a file
        try (FileOutputStream fileOut = new FileOutputStream("StudentRecords.xlsx")) {
            workbook.write(fileOut);
            System.out.println("Excel file created successfully!");
        } catch (IOException e) {
            e.printStackTrace();
        }
    }
}


----------------------------------------------------------------------------------------------------------------------------------------------------------------------

JAVACSRIPT 

const XLSX = require('xlsx');
const fs = require('fs');

// 10 student records
const students = [
    { ID: 1, Name: "Alice", Grade: "A" },
    { ID: 2, Name: "Bob", Grade: "B" },
    { ID: 3, Name: "Charlie", Grade: "C" },
    { ID: 4, Name: "David", Grade: "A" },
    { ID: 5, Name: "Eve", Grade: "B" },
    { ID: 6, Name: "Frank", Grade: "C" },
    { ID: 7, Name: "Grace", Grade: "A" },
    { ID: 8, Name: "Heidi", Grade: "B" },
    { ID: 9, Name: "Ivan", Grade: "C" },
    { ID: 10, Name: "Judy", Grade: "A" }
];

// Convert student data to worksheet
const worksheet = XLSX.utils.json_to_sheet(students);

// Create a new workbook and append worksheet
const workbook = XLSX.utils.book_new();
XLSX.utils.book_append_sheet(workbook, worksheet, "Students");

// Write to Excel file
XLSX.writeFile(workbook, "Students.xlsx");

console.log("Excel file 'Students.xlsx' created successfully.");


WRITE A COMMAND IN VSCODE TERMINAL

âœ… Option 1: Using VS Code (Recommended)
Open your project folder in VS Code.

Go to Terminal > New Terminal (or press Ctrl + `).

In the terminal at the bottom, run the commands like:

bash

mkdir student-excel
cd student-excel
npm init -y
npm install xlsx
Then create the writeStudents.js file inside that folder and paste the JavaScript code


To run your JS file:

node writeStudents.js

